# docker-compose.prod.yml
# Plant Care Application - Production Docker Compose Configuration
# Production-ready setup with scaling, monitoring, and security

version: '3.8'

services:
  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: plant-care-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Flower monitoring
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./static:/var/www/static:ro
      - ./logs/nginx:/var/log/nginx
      - certbot-data:/var/www/certbot:ro
      - certbot-certs:/etc/letsencrypt:ro
    depends_on:
      - plant-care-api-1
      - plant-care-api-2
    networks:
      - plant-care-network
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Plant Care API Instances (Load Balanced)
  plant-care-api-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: plant-care-api-1
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - API_V1_STR=/api/v1
      - PROJECT_NAME=Plant Care API
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=INFO
      - WORKERS=4
    volumes:
      - ./logs/api:/app/logs
    networks:
      - plant-care-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  plant-care-api-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: plant-care-api-2
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - API_V1_STR=/api/v1
      - PROJECT_NAME=Plant Care API
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=INFO
      - WORKERS=4
    volumes:
      - ./logs/api:/app/logs
    networks:
      - plant-care-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Celery Workers for Background Tasks
  celery-worker-care:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
      target: production
    container_name: plant-care-celery-care
    restart: unless-stopped
    command: celery -A app.background_jobs.celery_app worker -Q care_reminders,care_tasks -n care-worker@%h --loglevel=info --max-tasks-per-child=1000
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./logs/celery:/app/logs
    networks:
      - plant-care-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  celery-worker-ai:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
      target: production
    container_name: plant-care-celery-ai
    restart: unless-stopped
    command: celery -A app.background_jobs.celery_app worker -Q ai_processing,plant_identification -n ai-worker@%h --loglevel=info --max-tasks-per-child=100
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PLANT_ID_API_KEY=${PLANT_ID_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./logs/celery:/app/logs
    networks:
      - plant-care-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  celery-worker-notifications:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
      target: production
    container_name: plant-care-celery-notifications
    restart: unless-stopped
    command: celery -A app.background_jobs.celery_app worker -Q notifications,emails -n notifications-worker@%h --loglevel=info --max-tasks-per-child=1000
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - FIREBASE_CREDENTIALS=${FIREBASE_CREDENTIALS}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./logs/celery:/app/logs
    networks:
      - plant-care-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
      target: production
    container_name: plant-care-celery-beat
    restart: unless-stopped
    command: celery -A app.background_jobs.celery_app beat --loglevel=info --pidfile=/tmp/celerybeat.pid
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./logs/celery:/app/logs
    networks:
      - plant-care-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Celery Flower Monitoring
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
      target: production
    container_name: plant-care-flower
    restart: unless-stopped
    command: celery -A app.background_jobs.celery_app flower --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD} --port=5555
    environment:
      - ENVIRONMENT=production
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
    networks:
      - plant-care-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Redis Cache & Message Broker
  redis:
    image: redis:7.2-alpine
    container_name: plant-care-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - plant-care-network
    ports:
      - "127.0.0.1:6379:6379"  # Only expose locally
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: plant-care-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - plant-care-network
    ports:
      - "127.0.0.1:9090:9090"  # Only expose locally
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: plant-care-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - plant-care-network
    ports:
      - "127.0.0.1:3000:3000"  # Only expose locally
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:v2.7.1
    container_name: plant-care-certbot
    volumes:
      - certbot-data:/var/www/certbot
      - certbot-certs:/etc/letsencrypt
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${SSL_EMAIL} -d api.plantcare.app -d plantcare.app --agree-tos
    profiles:
      - ssl

networks: