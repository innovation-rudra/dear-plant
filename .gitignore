# Byte-compiled / optimized / DLL files
__pycache__/
<<<<<<< HEAD
*.py[codz]
=======
*.py[cod]
>>>>>>> 256981f (Initial commit for plant care backend)
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
<<<<<<< HEAD
*.py.cover
=======
*.py,cover
>>>>>>> 256981f (Initial commit for plant care backend)
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

<<<<<<< HEAD
# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

=======
>>>>>>> 256981f (Initial commit for plant care backend)
# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
<<<<<<< HEAD
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi
=======

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml
>>>>>>> 256981f (Initial commit for plant care backend)

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
<<<<<<< HEAD
.envrc
=======
>>>>>>> 256981f (Initial commit for plant care backend)
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
<<<<<<< HEAD
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/
=======
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to ignore the whole .idea directory.
.idea/

# VS Code
.vscode/
*.code-workspace

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# MacOS
.DS_Store
.AppleDouble
.LSOverride
Icon?
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# Plant Care Application Specific

# Environment files
.env
.env.local
.env.development
.env.staging
.env.production
.env.test

# Database files
*.db
*.sqlite
*.sqlite3

# Log files
logs/
*.log
*.log.*

# Upload directories
uploads/
media/
static/
temp/

# Certificate files
*.pem
*.key
*.crt
*.csr
*.p12
*.pfx
ssl/

# Docker
docker-compose.override.yml
.dockerignore

# Migration files (keep initial migrations but ignore generated ones)
migrations/versions/
!migrations/versions/__init__.py
!migrations/versions/001_initial.py

# Backup files
*.bak
*.backup
*.old
*.orig
*.tmp

# Cache directories
.cache/
.pytest_cache/
.mypy_cache/
.ruff_cache/

# Monitoring and metrics
prometheus_data/
grafana_data/

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
.atom/
.brackets.json
.editorconfig

# OS generated files
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
Icon?

# Temporary files
*.tmp
*.temp
~*

# Configuration files with sensitive data
config/secrets.yml
config/database.yml
config/redis.yml

# Application specific
plant_photos/
user_uploads/
exported_data/
reports/
analytics_data/

# Testing
.coverage
coverage.xml
htmlcov/
.pytest_cache/
test_results/
test_reports/

# Profiling
*.prof
*.pstats

# Documentation build
docs/_build/
docs/dist/
_build/
_static/
_templates/

# Package files
*.tar.gz
*.zip
*.rar
*.7z

# Node.js (if using any frontend tools)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Redis dump
dump.rdb

# Elasticsearch
elasticsearch/

# Jupyter Notebook
.ipynb_checkpoints

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl

# Ansible
*.retry

# Local development overrides
docker-compose.local.yml
local.yml
local.yaml
dev.yml
dev.yaml

# Secrets and keys
*.pem
*.key
*.crt
*.csr
*.p12
*.pfx
secrets/
keys/

# Backup databases
*.sql
*.dump
*.bak

# Application logs
app.log
error.log
access.log
debug.log
celery.log
worker.log
beat.log

# Performance and profiling
*.prof
*.pstats
profiling/

# Temporary Python files
*.pyc
*.pyo
*.pyd
__pycache__/
.Python

# Local environment variables
.env.*
!.env.example

# IDE workspace files
*.code-workspace
.vscode/settings.json
.vscode/launch.json

# Misc
.DS_Store
*.orig
.rej
*.tmp
*.bak
*.swp
*~.nib
*.sublime-project
*.sublime-workspacevenv/
__pycache__/
.env
*.pyc
>>>>>>> 256981f (Initial commit for plant care backend)
