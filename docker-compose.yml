version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: plant_care_postgres
    environment:
      POSTGRES_DB: plant_care_db
      POSTGRES_USER: plant_care_user
      POSTGRES_PASSWORD: plant_care_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - plant_care_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U plant_care_user -d plant_care_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: plant_care_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - plant_care_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: plant_care_api
    environment:
      - DATABASE_URL=postgresql+asyncpg://plant_care_user:plant_care_password@postgres:5432/plant_care_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - APP_ENV=development
      - DEBUG=true
      - LOG_LEVEL=debug
    env_file:
      - .env
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - plant_care_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    container_name: plant_care_celery_worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://plant_care_user:plant_care_password@postgres:5432/plant_care_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - APP_ENV=development
      - DEBUG=true
      - LOG_LEVEL=debug
    env_file:
      - .env
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - plant_care_network
    command: celery -A app.background_jobs.celery_app worker --loglevel=info --concurrency=4
    healthcheck:
      test: ["CMD", "celery", "-A", "app.background_jobs.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    container_name: plant_care_celery_beat
    environment:
      - DATABASE_URL=postgresql+asyncpg://plant_care_user:plant_care_password@postgres:5432/plant_care_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - APP_ENV=development
      - DEBUG=true
      - LOG_LEVEL=debug
    env_file:
      - .env
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - plant_care_network
    command: celery -A app.background_jobs.celery_app beat --loglevel=info
    healthcheck:
      test: ["CMD", "celery", "-A", "app.background_jobs.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    container_name: plant_care_flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - FLOWER_PORT=5555
      - FLOWER_BASIC_AUTH=admin:admin
    env_file:
      - .env
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - plant_care_network
    command: celery -A app.background_jobs.celery_app flower --port=5555
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: plant_care_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - plant_care_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: plant_care_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - plant_care_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: plant_care_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - plant_care_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: plant_care_jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - plant_care_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:16686"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  plant_care_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local